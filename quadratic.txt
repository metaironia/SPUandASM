jmp main

:main
	in; coefficient A 
	in; coefficient B
	in; coefficient C
	pop rcx; coefficient C 
	pop rbx; coefficient B
	pop rax; coefficient A

	push rax
	push 0
	jne NOT_LINEAR
		call LinearSolve
		hlt
	:NOT_LINEAR
	call Discr
	push 0
	push rdx
	jbe NOT_TWO
		call TwoRoots
		hlt
	:NOT_TWO
	push 0
	push rdx
	jne NO_ROOTS
		call OneRoot
		hlt
	:NO_ROOTS
	call PrintNoRoots
	hlt


:TwoRoots
	push 0
	push rbx 
	sub
	push rdx
	sqrt
	add
	push rax
	push 2
	mul
	div
	out

	push 0
	push rbx 
	sub
	push rdx
	sqrt
	sub
	push rax
	push 2
	mul
	div
	out	
	
	ret

:OneRoot
	push 0
	push rbx
	sub
	push 2
	push rax
	mul
	div
	out

	ret

:Discr
	push rbx
	push rbx
	mul
	push 4
	push rcx
	push rax
	mul
	mul
	sub
	pop rdx
	ret
 
:LinearSolve
	push rbx
	push 0
	jne ONE_ROOT_LIN
		push 0
		push rcx
		jne NO_ROOTS_LIN
			call PrintInfRoots
			ret
		:NO_ROOTS_LIN
		call PrintNoRoots
		ret	
	:ONE_ROOT_LIN
	push 0
	push rcx
	sub
	push rbx
	div
	out
	ret

:PrintNoRoots; prints "no roots"
	push 115
	push 116
	push 111
	push 111
	push 114
	push 32
	push 111
	push 110
	
	push 8
	pop [0]

	:for_no_roots
		outc

		push 1
		push [0]
		push -1
		add
		pop [0]
		push [0]		
	ja for_no_roots
	ret

:PrintInfRoots; prints "infinitely many roots"

	push 115
	push 116
	push 111
	push 111
	push 114
	push 32
	push 121
	push 110
	push 97
	push 109
	push 32
	push 121
	push 108
	push 101
	push 116
	push 105
	push 110
	push 105
	push 102
	push 110
	push 105
	
	push 21
	pop [1]
	:for_inf_roots
		outc

		push 1
		push [1]
		push -1
		add
		pop [1]
		push [1]
	ja for_inf_roots

	push 0
        pop rax

:Next
        push rax
	push 50
	jb Stop

	push rax
	push 2
	mul
	pop rbx

	push 1
	pop [rbx]

	push rax
	push 1
	add
	pop rax

	jmp Next

:Stop
	ret
  